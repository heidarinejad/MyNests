import nest
import nest.voltage_trace

nest.ResetKernel()

neuron=nest.Create("iaf_psc_alpha")

"""
noise_ex=nest.Create("poisson_generator")
noise_in=nest.Create("poisson_generator")
nest.SetStatus(noise_ex,{"rate":80000})   # 80000 Hz
nest.SetStatus(noise_in,{"rate":15000})   # 15000 Hz
"""
# this is the short way to above code
noise=nest.Create("poisson_generator", 2)    # Number of poisson outputs is determinded by number '2' here.
nest.SetStatus(noise,[{"rate":80000.0},{"rate":15000.0}])       # number of rates here is in accordance with number of poisson generator outputs
#without noise membrane potential is just fixed at -70 mV and no firing (by default the "I_e" is 0.)

voltmeter=nest.Create("voltmeter")

# program is working normally without below line
nest.SetStatus(voltmeter,{"withgid":True, "withtime": True})

# Voltmeter contains membrane as vector(V_m) and also pretrain times as vector /times and node GIDs as /senders, if withgid & withtime is set True

"""
syn_dict_ex={"weight":1.2}   # 1.2 pA
syn_dict_in={"weight":-2.0}  #-2.0 pA
nest.Connect([noise_ex], neuron, syn_spec=syn_dict_ex)
nest.Connect([noise_in], neuron, syn_spec=syn_dict_in)
"""

# this is the short way to above code
nest.Connect(noise,neuron,syn_spec={'weight':[[1.2, -2.0]], 'delay':1.0})   # each poisson generator should have one weight here as a synaptic spec

# as a principle each excitatory generator should produce a postsynaptice current of 1.2 pA
# and inhibitory generator should make -2.0 pA current
nest.Connect(voltmeter,neuron)

nest.Simulate(1000.0)  # ms

nest.voltage_trace.from_device(voltmeter)
nest.voltage_trace.show()

# for this program 4 nodes is generated by program (2 poisson generator, 1 neuron and 1 voltmeter) (neuron :1, noise:2&3, voltmeter:4)
#to check the global_id      nest.GetStatus(voltmeter)[0]["global_id"]